@using BlazorApp2.DB
@using Microsoft.EntityFrameworkCore
@inject User02Context db

<div class="container">
    <div class="text-center"><b>Календарь событий</b></div>
    <div class="row bg-success ">
        <div class="col-sm-1" onclick="@(()=>AddMonth(-1))">&lt;</div>
        <div class="col-sm-10 text-center">@month</div>
        <div class="col-sm-1" onclick="@(()=>AddMonth(1))">&gt;</div>
    </div>
    <div class="row">
        <table>
            <thead>
                <tr>
                    <th style="text-align:center;">п</th>
                    <th style="text-align:center;">в</th>
                    <th style="text-align:center;">с</th>
                    <th style="text-align:center;">ч</th>
                    <th style="text-align:center;">п</th>
                    <th style="text-align:center;">с</th>
                    <th style="text-align:center;">в</th>
                </tr>
            </thead>
            <tbody>
                @while (dayIndex <= dayCount)
                {
                    <tr>
                        @for (int i = 1; i <= 7; i++)
                        {
                            @switch (PrintDay(i))
                            {
                                case 0:
                                    <td></td>
                                    break;
                                case 1:
                                    <td style="text-align:center;@GetBGFromDay(dayIndex)">
                                        <div style="@GetToday(dayIndex)">
                                            @(dayIndex++)
                                        </div>
                                    </td>
                                    break;
                                case 2:
                                    <td style="text-align:center;@GetBGFromDay(dayIndex)" Title="@GetCakeTooltipStyle(dayIndex++)">
                                        <div style="@GetToday(dayIndex)">
                                            <img src="cake.png" width="20" />
                                        </div>
                                    </td>
                                    break;
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    string month = "";
    DateTime selectedDate;
    DateTime currentDate;
    DateTime firstDate;

    int dayCount = 0;
    int dayIndex = 0;
    int weekDay = 0;

    [Parameter]
    public List<Employee> Employees { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentDate = DateTime.Now;
        SetDate(currentDate);
        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            SetDate(selectedDate);
        return base.OnAfterRenderAsync(firstRender);
    }


    void SetDate(DateTime date)
    {
        selectedDate = date;
        month = date.ToString("MMMM");

        dayCount = DateTime.DaysInMonth(date.Year, date.Month);
        firstDate = new DateTime(date.Year, date.Month, 1);
        weekDay = (int)firstDate.DayOfWeek;
        if (weekDay == 0)
            weekDay = 7;
        dayIndex = 1;
        print = false;
    }

    void AddMonth(int count)
    {
        dayIndex = 1;
        selectedDate = selectedDate.AddMonths(count);
        selectedDate = new DateTime(selectedDate.Year, selectedDate.Month, 1);
        SetDate(selectedDate);
    }

    bool print = false;
    int PrintDay(int indexWeek)
    {
        if (!print)
        {
            if (weekDay == indexWeek)
                print = true;
        }
        if (print)
        {
            if (dayIndex <= dayCount)
            {
                if (Employees.FirstOrDefault(s =>
                    s.BirthdayDate != null &&
                    s.BirthdayDate.Value.Day == dayIndex &&
                    s.BirthdayDate.Value.Month == selectedDate.Month) != null)
                {
                    return 2;
                }
                else
                {
                    return 1;
                }
            }
        }
        return 0;
    }

    string GetCakeTooltipStyle(int day)
    {
        var workers = Employees.Where(s =>
                    s.BirthdayDate != null &&
                    s.BirthdayDate.Value.Day == day &&
                    s.BirthdayDate.Value.Month == selectedDate.Month).
                    Select(s => s.LastName).ToList();

        return string.Join(' ', workers);
    }

    Random random = new();
    string GetBGFromDay(int day)
    {
        // получаем кол-во событий в этот день
        // возвращаем цвет фона
        int rnd = random.Next(-5, 6);
        if (rnd < 0)
            rnd = 0;

        if (rnd >= 5)
            return "border-radius:50%;background:#FC4343;";
        else if (rnd == 0)
            return "";
        else if (rnd < 2)
            return "border-radius:50%;background:#89FC43;";
        
        return "border-radius:50%;background:#F8FC43;";
    }

    string GetToday(int day)
    {
        try
        {
            if (new DateTime(selectedDate.Year, selectedDate.Month, day) == currentDate.Date)
                return "border:2px solid green; border-radius:50%;";
        }
        catch { }
        return "";
    }
}
